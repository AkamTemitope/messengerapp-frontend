{"version":3,"sources":["redux/Slices/userSlice.js","redux/Slices/optionSlice.js","components/ChatSection/ChatHeader/ChatHeader.js","components/ChatSection/ChatMessages/Message/Message.js","components/ChatSection/ChatMessages/ChatMessages.js","api/axios.js","api/index.js","sockets/events.js","sockets/io.js","redux/actions/actions.js","components/ChatSection/InputSection/InputSection.js","components/ChatSection/ChatSection.js","components/Profile/ContactProfile/ContactProfile.js","firebase.js","components/Profile/UserProfile/UserProfile.js","components/Sidebar/Conversation/ContactConversation.js","components/Sidebar/Conversation/GroupConversation.js","components/Sidebar/SidebarHeader/SidebarHeader.js","components/Sidebar/SidebarSubHeader/SidebarSubHeader.js","components/Sidebar/Sidebar.js","components/Profile/GroupProfile/GroupMember.js","components/Profile/GroupProfile/GroupProfile.js","components/Chat.js","components/Login/Login.js","App/App.js","store/store.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","isLoggedIn","loggingIn","is_active","contacts","groups","error","loginError","timestamp","connected","notifications","loading","reducers","setNotification","state","action","notification","payload","setConnected","setIsActive","setLoading","setIsLoggedIn","setIsLoggingIn","isLoggingIn","setGroups","addGroup","removeGroup","forEach","group","_id","push","setContacts","addContact","addNewMessage","type","map","contact","messages","message","last_message","editUserName","username","editUserNameInConversations","members","member","userId","updateIsActive","editGroupName","groupname","editGroupDescription","description","deleteOneMessage","deleteAllMessages","updateBlockStatus","block","updateGroup","setError","LoginError","login","logout","actions","deleteContactMessage","deleteGroupMessage","selectUser","selectGroups","selectContacts","optionSlice","sidebarSearch","showConversation","searchInput","toggleProfile","conversation","toggleConversation","toggle","fetchResult","update","setSidebarSearch","setUpdate","setShowConversation","setSearchInput","setToggleProfile","setToggleConversation","setConversation","setFetchResult","selectSidebarSearch","option","selectShowConversation","selectSearchInput","selectToggleProfile","selectToggleConversation","ChatHeader","dispatch","useDispatch","useSelector","useState","setconversation","setname","photoUrl","setphotoUrl","setis_active","useEffect","find","className","onClick","Avatar","src","style","color","title","Message","from","moment","calendar","body","ChatMessages","messageRef","useRef","foundConversation","current","addEventListener","event","target","currentTarget","scroll","top","scrollHeight","behavior","smooth","ref","instance","axios","create","baseURL","process","fetchCreateUser","post","userExists","email","get","fetchUserByEmail","updateUserName","id","patch","fetchContact","createContact","newContactMessage","updateBlock","deleteContactMessages","delete","fetchGroup","createGroup","newGroupMessage","addMember","updateName","updateDescription","deleteGroupMessages","deleteMember","deleteGroup","events","sendMessage","receiveMessage","editName","updateOnlineStatus","updateNewStatus","join","joinContact","addNewContact","connectMemberToContact","newMessage","joinGroup","addNewMember","connectMemberToGroup","leaveGroup","disconnecting","disconnect","socket","options","transports","send","data","emit","console","log","deleteMessages","on","next","a","api","res","io","InputSection","input","setinput","showPicker","setshowPicker","status","value","placeholder","onChange","e","preventDefault","trim","Date","now","display","onEmojiClick","emojiObject","emoji","disableSearchBar","fontSize","ChatSection","ContactProfile","otherContact","setotherContact","temp","handleBlock","newBlock","deleteMessagesDisplay","setdeleteMessagesDisplay","DeleteContactMessages","DELETE","alt","length","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","provider","GoogleAuthProvider","UserProfile","newName","setnewName","editDisplay","seteditDisplay","onSubmit","signOut","ContactConversation","GroupConversation","AddOptions","moreDisplay","setmoreDisplay","addGroupDisplay","setaddGroupDisplay","addContactDisplay","setaddContactDisplay","AddContactOptions","AddGroupOptions","setdescription","required","spellCheck","rows","created_at","setemail","exist","setexist","result","setresult","setmessage","alreadyExist","createNewContact","split","SidebarHeader","SearchBar","SubHeader","setshowSearch","SidebarSubHeader","search","Sidebar","toLowerCase","b","includes","GroupMember","AddMember","addMemberDisplay","setaddMemberDisplay","GroupProfile","newDescription","setnewDescription","leaveGroupDisplay","setleaveGroupDisplay","LeaveGroup","LEAVE","deleteGroupDisplay","setdeleteGroupDisplay","DeleteGroup","deleteGroupMessagesDisplay","setdeleteGroupMessagesDisplay","DeleteGroupMessages","editDesDisplay","seteditDesDisplay","editNameDisplay","seteditNameDisplay","Chat","setgroup","setcontact","loadingCounter","setloadingCounter","set","contact_id","group_id","Login","useAuthState","onAuthStateChanged","authUser","req","uid","displayName","photoURL","signInWithPopup","catch","App","configureStore","reducer","userReducer","optionReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.616864eb.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nexport const userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState: {\r\n        user: null,\r\n        isLoggedIn: false,\r\n        loggingIn: false,\r\n        is_active: false,\r\n        contacts: [],\r\n        groups: [],\r\n        error: null,\r\n        loginError: null,\r\n        timestamp: null,\r\n        connected: true,\r\n        notifications: [],\r\n        loading: false \r\n\r\n        \r\n    },\r\n\r\n    reducers: {\r\n\r\n        setNotification: (state, action) => {\r\n            state.notification = action.payload\r\n        },\r\n\r\n        setConnected: (state, action) => {\r\n            state.connected = action.payload\r\n        },\r\n\r\n        setIsActive: (state, action) => {\r\n            state.user.is_active = action.payload\r\n        },\r\n\r\n        setLoading: (state, action) => {\r\n            state.loading = action.payload\r\n        },\r\n\r\n        setIsLoggedIn: (state, action) => {\r\n            state.isLoggedIn = action.payload\r\n        },\r\n\r\n        setIsLoggingIn: (state, action) => {\r\n            state.isLoggingIn = action.payload\r\n        },\r\n        \r\n        setGroups: (state, action) => {  \r\n            state.groups = action.payload\r\n        },\r\n\r\n        addGroup: (state, action) => {  \r\n            state.groups = [...state.groups, action.payload]\r\n        },\r\n\r\n        removeGroup: (state, action) => {\r\n            let groups = []\r\n            state.groups.forEach( group => {\r\n                if(group._id !== action.payload._id){\r\n                    groups.push(group)\r\n                }\r\n            })\r\n            state.groups = groups\r\n        },\r\n        \r\n        setContacts: (state, action) => {\r\n            state.contacts = action.payload;\r\n        },\r\n\r\n        addContact: (state, action) => {  \r\n            state.contacts = [...state.contacts, action.payload]\r\n        },\r\n\r\n        addNewMessage: (state, action) => {\r\n            if (action.payload.type === \"contact\") {\r\n                state.contacts = state.contacts.map(contact => {\r\n                    if (contact?._id === action.payload._id) {\r\n                        let messages = [...contact.messages, action.payload.message]\r\n                        return {...contact, messages: messages, last_message: action.payload.message }\r\n                    }\r\n                    return contact\r\n                });\r\n            }\r\n            else {\r\n                state.groups = state.groups.map(group => {\r\n                    if (group?._id === action.payload._id) {\r\n                        let messages = [...group.messages, action.payload.message]\r\n                        return {...group, messages: messages, last_message: action.payload.message }\r\n                    }\r\n                    return group\r\n                });\r\n            }\r\n        },\r\n\r\n        editUserName:  (state, action) => {\r\n            state.user.username = action.payload\r\n        },\r\n        editUserNameInConversations: (state, action) => {\r\n            if (action.payload.type === \"contact\") {\r\n                state.contacts = state.contacts.map(contact => {\r\n                    if (contact?._id === action.payload._id) {\r\n                        let members = contact.members.map( member => {\r\n                            if (member._id === action.payload.userId){\r\n                                return {...member, username: action.payload.username}\r\n                            }\r\n                            return member\r\n                        })\r\n                        return {...contact, members: members}\r\n                    }\r\n                    return contact\r\n                });\r\n\r\n            }\r\n            else {\r\n                state.groups = state.groups.map(group => {\r\n                    if (group?._id === action.payload._id) {\r\n                        let members = group.members.map( member => {\r\n                            if (member._id === action.payload.userId){\r\n                                return {...member, username: action.payload.username}\r\n                            }\r\n                            return member\r\n                        })\r\n                        return {...group, members: members}\r\n                    }\r\n                    return group\r\n                });\r\n            }\r\n        },\r\n\r\n        updateIsActive: (state, action) => {\r\n            if (action.payload.type === \"contact\") {\r\n                state.contacts = state.contacts.map(contact => {\r\n                    if (contact?._id === action.payload._id) {\r\n                        let members = contact.members.map( member => {\r\n                            if (member._id === action.payload.userId){\r\n                                return {...member, is_active: action.payload.is_active}\r\n                            }\r\n                            return member\r\n                        })\r\n                        return {...contact, members: members}\r\n                    }\r\n                    return contact\r\n                });\r\n\r\n            }\r\n            else if (action.payload.type === \"group\") {\r\n                state.groups = state.groups.map(group => {\r\n                    if (group?._id === action.payload._id) {\r\n                        let members = group.members.map( member => {\r\n                            if (member._id === action.payload.userId){\r\n                                return {...member, is_active: action.payload.is_active}\r\n                            }\r\n                            return member\r\n                        })\r\n                        return {...group, members: members}\r\n                    }\r\n                    return group\r\n                });\r\n            }\r\n            else {\r\n                state.contacts = state.contacts.map(contact => {\r\n                    if (contact?._id === action.payload._id) {\r\n                        let members = contact.members.map( member => {\r\n                            if (member._id === action.payload.userId){\r\n                                return {...member, is_active: action.payload.is_active}\r\n                            }\r\n                            return member\r\n                        })\r\n                        return {...contact, members: members}\r\n                    }\r\n                    return contact\r\n                });\r\n                state.groups = state.groups.map(group => {\r\n                    if (group?._id === action.payload._id) {\r\n                        let members = group.members.map( member => {\r\n                            if (member._id === action.payload.userId){\r\n                                return {...member, is_active: action.payload.is_active}\r\n                            }\r\n                            return member\r\n                        })\r\n                        return {...group, members: members}\r\n                    }\r\n                    return group\r\n                });\r\n            }\r\n        },\r\n\r\n        editGroupName:  (state, action) => {\r\n            state.groups = state.groups.map( group => {\r\n                if (group._id === action.payload._id) {\r\n                    return {...group, groupname: action.payload.groupname}\r\n                }\r\n                return group\r\n            })\r\n        },\r\n\r\n        editGroupDescription:  (state, action) => {\r\n            state.groups = state.groups.map( group => {\r\n                if (group._id === action.payload._id) {\r\n                    return {...group, description: action.payload.description}\r\n                }\r\n                return group\r\n            })\r\n        },\r\n\r\n        deleteOneMessage: (state, action) => {\r\n            if (action.payload.type === \"contact\") {\r\n\r\n            }\r\n            else {\r\n\r\n            }\r\n        },\r\n\r\n        deleteAllMessages: (state, action) => {\r\n            if (action.payload.type === \"contact\") {\r\n                state.contacts = state.contacts.map(contact => {\r\n                    if (contact?._id === action.payload._id) {\r\n                        return {...contact, messages: [], last_message: null }\r\n                    }\r\n                    return contact\r\n                });\r\n\r\n            }\r\n            else {\r\n                state.groups = state.groups.map(group => {\r\n                    if (group?._id === action.payload._id) {\r\n                        return {...group, messages: [], last_message: null }\r\n                    }\r\n                   \r\n                    return group\r\n                });\r\n            }\r\n        },\r\n\r\n        updateBlockStatus: (state, action) => {\r\n            state.contacts = state.contacts.map(contact => {\r\n                if (contact?._id === action.payload._id) {\r\n                    return {...contact, block: action.payload.block}\r\n                }\r\n                return contact\r\n            });\r\n\r\n        },\r\n\r\n        updateGroup: (state, action) => {\r\n            state.groups = state.groups.map(group => {\r\n                if (group?._id === action.payload._id) {\r\n                    return action.payload.group\r\n                }\r\n                return group\r\n            });\r\n        },\r\n        \r\n        setError: (state, action) => {\r\n            if(action.payload.error){\r\n                state.error = action.payload.error\r\n            }\r\n            if (action.payload.LoginError){\r\n                state.loginError = action.payload.loginError\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n                \r\n            }\r\n        },\r\n        \r\n        login: (state, action) => {\r\n            state.user = action.payload;\r\n        },\r\n        \r\n        logout: (state) => {\r\n            state.user = null;\r\n            state.contacts = [ ]\r\n            state.groups = [ ]\r\n            state.is_active = false\r\n            state.timestamp = null\r\n            state.isLoggedIn = false\r\n            state.isLoggingIn = false\r\n            state.loading = false \r\n            state.error = null\r\n            state.loginError = null\r\n    },\r\n    },\r\n\r\n})\r\n\r\nexport const { login, logout, setGroups, setContacts, setError, setLoading } = userSlice.actions;\r\nexport const { setNotification, setConnected, setIsActive, setIsLoggedIn,  setIsLoggingIn, updateIsActive } = userSlice.actions;\r\nexport const { removeGroup, updateBlockStatus, addContact, addGroup, deleteAllMessages, editUserNameInConversations } = userSlice.actions\r\nexport const { editUserName, editGroupName, editGroupDescription, deleteContactMessage, deleteGroupMessage, updateGroup, addNewMessage } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\nexport const selectGroups = (state) => state.user.groups;\r\nexport const selectContacts = (state) => state.user.contacts;\r\nexport const selectError   = (state) => state.user.error\r\nexport const selectLoginError   = (state) => state.user.loginError\r\nexport const selectNotifications   = (state) => state.user.notifications\r\nexport const selectConnected  = (state) => state.user.connected\r\nexport const selectIsLoggedIn   = (state) => state.user.isLoggedIn\r\nexport const selectIsLoggingIn   = (state) => state.user.isLoggingIn\r\nexport const selectLoading   = (state) => state.user.loading\r\n\r\nexport default userSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nexport const optionSlice = createSlice({\r\n    name: \"option\",\r\n    initialState: {\r\n        sidebarSearch: false,\r\n        showConversation: \"contacts\",\r\n        searchInput: \"\",\r\n        toggleProfile: false,\r\n        conversation: null,\r\n        toggleConversation: { \r\n            _id: null, \r\n            type: \"\", \r\n            toggle: false\r\n        },\r\n         fetchResult: null,\r\n         update: null\r\n    },\r\n\r\n    reducers: {\r\n\r\n        setSidebarSearch: (state, action) => {\r\n            state.sidebarSearch = action.payload;\r\n        },\r\n\r\n        setUpdate: (state, action) => {\r\n            state.update = action.payload;\r\n        },\r\n\r\n        setShowConversation: (state, action) => {\r\n            state.showConversation = action.payload;\r\n        },\r\n\r\n        setSearchInput: (state, action) => {\r\n            state.searchInput = action.payload;\r\n        },\r\n\r\n        setToggleProfile: (state, action) => {\r\n            state.toggleProfile = action.payload;\r\n        },\r\n\r\n        setToggleConversation: (state, action) => {\r\n            state.toggleConversation = action.payload;\r\n        },\r\n\r\n        setConversation: (state, action) => {\r\n            state.conversation = action.payload\r\n        },\r\n\r\n        setFetchResult: (state, action) => {\r\n            state.fetchResult = action.payload\r\n        }\r\n\r\n    },\r\n\r\n}) \r\n\r\nexport const { setShowConversation, setSearchInput, setToggleProfile, setToggleConversation, setConversation } = optionSlice.actions;\r\nexport const { setSidebarSearch, setFetchResult, setUpdate } = optionSlice.actions;\r\n\r\nexport const selectSidebarSearch = (state) => state.option.sidebarSearch;\r\nexport const selectConversation = (state) => state.option.conversation;\r\nexport const selectShowConversation = (state) => state.option.showConversation;\r\nexport const selectSearchInput = (state) => state.option.searchInput\r\nexport const selectToggleProfile = (state) => state.option.toggleProfile\r\nexport const selectToggleConversation = (state) => state.option.toggleConversation\r\nexport const selectFetchResult = (state) => state.option.fetchResult;\r\nexport const selectUpdate = (state) => state.option.update;\r\n\r\nexport default optionSlice.reducer;\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./ChatHeader.css\"\r\nimport { GoPrimitiveDot } from 'react-icons/go';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { CgMoreVertical } from 'react-icons/cg';\r\nimport { selectToggleConversation, setToggleConversation } from '../../../redux/Slices';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectUser } from '../../../redux/Slices';\r\nimport { selectContacts, selectGroups } from './../../../redux/Slices/userSlice';\r\n\r\nfunction ChatHeader() {\r\n    \r\n    const dispatch = useDispatch()\r\n    const user = useSelector(selectUser)\r\n    const toggleConversation = useSelector(selectToggleConversation)\r\n    const groups = useSelector(selectGroups)\r\n    const contacts = useSelector(selectContacts)\r\n    const [conversation, setconversation] = useState(null)\r\n    const [name, setname] = useState(\"\")\r\n    const [photoUrl, setphotoUrl] = useState(\"\")\r\n    const [is_active, setis_active] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (toggleConversation.type === \"contact\") {\r\n            setconversation(contacts.find( contact => contact._id === toggleConversation._id))\r\n\r\n        } \r\n        else {\r\n            setconversation(groups.find( group => group._id === toggleConversation._id)) \r\n        }\r\n\r\n    }, [toggleConversation._id, toggleConversation.type, contacts, groups])\r\n\r\n    useEffect(() => {\r\n        if (conversation) {\r\n            if (toggleConversation.type === \"contact\"){\r\n                if (user._id !== conversation.members[0]._id) {\r\n                    setname(conversation.members[0]?.username) \r\n                    setphotoUrl(conversation.members[0]?.photoUrl) \r\n                    setis_active(conversation.members[0]?.is_active)\r\n                } \r\n                else { \r\n                    setname(conversation.members[1]?.username) \r\n                    setphotoUrl(conversation.members[1]?.photoUrl) \r\n                    setis_active(conversation.members[1]?.is_active)\r\n                }\r\n            }\r\n            else {\r\n                setname(conversation?.groupname) \r\n                setphotoUrl(conversation?.photoUrl) \r\n            }\r\n        }\r\n    }, [conversation, toggleConversation.type, user._id])\r\n\r\n    return (\r\n        <>\r\n            {conversation && \r\n            <div className=\"chatHeader\">\r\n                <div className=\"chatHeader_avatar\" onClick={ () => dispatch(setToggleConversation({ ...toggleConversation, toggle: true}))}>\r\n                    <Avatar src={photoUrl}/>\r\n                    <span>{name} \r\n                        {toggleConversation.type === \"contact\" && \r\n                        <GoPrimitiveDot style={ {color: is_active? \"green\" : \"grey\" } } />}\r\n                    </span>\r\n                </div>\r\n                <CgMoreVertical title=\"Not working yet\" />\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import React from 'react'\r\nimport './Message.css'\r\nimport { selectUser } from '../../../../redux/Slices';\r\nimport { useSelector } from 'react-redux';\r\nimport moment from \"moment\"\r\nfunction Message( {message}) {\r\n    const user = useSelector(selectUser)\r\n\r\n    return (\r\n        <div className={`message ${user._id !== message.from?._id && \"left\"}`}>\r\n            <div className=\"message_details\">\r\n                <p>{message.from?.username}</p>\r\n                <span>{moment(message.timestamp).calendar()}</span>\r\n            </div>\r\n            <p>{message.body}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React, { useRef, useEffect, useState } from 'react'\r\nimport { selectToggleConversation } from '../../../redux/Slices'\r\nimport './ChatMessages.css'\r\nimport Message from './Message/Message'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectContacts, selectGroups } from './../../../redux/Slices/userSlice';\r\n\r\nfunction ChatMessages() {\r\n    const messageRef = useRef(null);\r\n    const groups = useSelector(selectGroups)\r\n    const contacts = useSelector(selectContacts)\r\n    const toggleConversation = useSelector(selectToggleConversation)\r\n    const [conversation, setconversation] = useState({})\r\n    \r\n    useEffect(() => {\r\n        if (toggleConversation.type === \"contact\") {\r\n             const foundConversation =contacts.find( contact => contact._id === toggleConversation._id)\r\n            setconversation(foundConversation)\r\n            \r\n        } \r\n        else {\r\n            const foundConversation =groups.find( group => group._id === toggleConversation._id)\r\n            setconversation(foundConversation) \r\n        }\r\n        \r\n    }, [toggleConversation._id, toggleConversation.type, contacts, groups])\r\n    \r\n    useEffect(() => {\r\n        if (messageRef) {\r\n            messageRef.current.addEventListener('DOMNodeInserted', event => {\r\n            const { currentTarget: target } = event;\r\n            target.scroll({ top: target.scrollHeight, behavior: 'smooth', block: 'end',  smooth: true });\r\n            });\r\n        }\r\n    \r\n    }, [toggleConversation._id])\r\n\r\n    return (\r\n        <>\r\n            {conversation && \r\n            <div className=\"chatMessages\" ref={messageRef} >\r\n                {conversation.messages && \r\n                conversation.messages.map( (message) => {\r\n                    return <Message key={message._id} message={message}/>\r\n                })}\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatMessages\r\n","import axios from 'axios'\r\n\r\nconst url = process.env.REACT_APP_BASE_URL\r\n\r\nconst instance = axios.create({\r\n    baseURL: url\r\n})\r\n\r\nexport default instance\r\n\r\n","import axios from \"./axios\"\r\n\r\n// USER API CALLS\r\n\r\nexport const fetchCreateUser = (body) => axios.post(\"/users/new\", body)\r\n\r\nexport const userExists = (email) => axios.get(`/users/exist?e=${email}`)\r\n\r\nexport const fetchUserById  = (id) => axios.get(`users/user/${id}`)\r\n\r\nexport const fetchUserByEmail  = (email) => axios.get(`users/email?e=${email}`)\r\n\r\nexport const updateUserName = (id, body) => axios.patch(`users/updateName/${id}`, body)\r\n\r\nexport const updateUserPhoto = (id, body) => axios.patch(`users/updatePhoto/${id}`, body)\r\n\r\n\r\n// CONTACT API CALLS\r\n\r\nexport const fetchContact = (id) =>  axios.get(`contacts/${id}`)\r\n\r\nexport const createContact = (body) =>  axios.post(\"contacts/new\", body)\r\n\r\nexport const newContactMessage = (id, body) => axios.post(`contacts/newMessage/${id}`, body)\r\n\r\nexport const updateRequest = (id, body) => axios.patch(`contacts/updateRequest/${id}`, body)\r\n\r\nexport const updateBlock = (id, body) => axios.patch(`contacts/updateBlock/${id}`, body)\r\n\r\nexport const deleteContactMessage = (id, body) => axios.delete(`contacts/deleteMessage/${id}`, body)\r\n\r\nexport const deleteContactMessages = (id) => axios.delete(`contacts/deleteMessages/${id}`)\r\n\r\nexport const deleteContact = (id) => axios.delete(`contacts/deleteContact/${id}`)\r\n\r\n\r\n// GROUP API CALLS\r\n\r\nexport const fetchGroup = (id) =>  axios.get(`groups/${id}`)\r\n\r\nexport const createGroup = (body) =>  axios.post(\"groups/new/\", body)\r\n\r\nexport const newGroupMessage = (id, body) => axios.post(`groups/newMessage/${id}`, body)\r\n\r\nexport const addMember = (id, body) => axios.patch(`groups/addMember/${id}`, body)\r\n\r\nexport const updateName = (id, body) => axios.patch(`groups/updateName/${id}`, body)\r\n\r\nexport const updatePhoto = (id, body) => axios.patch(`groups/updatePhoto/${id}`, body)\r\n\r\nexport const updateDescription = (id, body) => axios.patch(`groups/updateDescription/${id}`, body)\r\n\r\nexport const deleteGroupMessage = (id, messageId) => axios.delete(`groups/deleteMessage/${id}?_id=${messageId}`)\r\n\r\nexport const deleteGroupMessages = (id) => axios.delete(`groups/deleteMessages/${id}`)\r\n\r\nexport const deleteMember = (id, userId) => axios.delete(`groups/deleteMember/${id}?_id=${userId}`)\r\n\r\nexport const deleteGroup = (id) => axios.delete(`groups/deleteGroup/${id}`)\r\n\r\n\r\n","const events = {\r\n    \r\n    sendMessage: \"client message\",\r\n    receiveMessage: \"server message\",\r\n    editName: \"edit name\",\r\n    updateOnlineStatus: \"update is_active status\",\r\n    updateNewStatus: \"update old connected user status\",\r\n    join: \"user id\",\r\n    joinContact: \"join contact\",\r\n    addNewContact:\"add a new contact\",\r\n    updateBlock: \"update block status\",\r\n    newContactMessage: \"new contact message\",\r\n    connectMemberToContact: \"connect member to contact\",\r\n    deleteContactMessage: \"delete contact message\",\r\n    deleteContactMessages: \"delete contact messages\",\r\n    newMessage: \"new contact/group message\",\r\n    joinGroup: \"join group\",\r\n    editGroupName: \"edit group name\",\r\n    newGroupMessage: \"new group message\",\r\n    editGroupDescription: \"edit group description\",\r\n    addNewMember: \"add new member\",\r\n    connectMemberToGroup: \"connect member to group\",\r\n    leaveGroup: \"leave group\",\r\n    deleteGroupMessage: \"delete group message\",\r\n    deleteGroupMessages: \"delete group messages\",\r\n    deleteGroup: \"delete group\",\r\n    disconnecting: \"disconnecting\",\r\n    disconnect: \"disconnect\"\r\n    \r\n}\r\n    \r\nexport default events","import io from \"socket.io-client\"\r\nimport { fetchGroup } from \"../redux/actions/actions\"\r\nimport { updateBlockStatus, deleteAllMessages, updateGroup, addGroup, removeGroup, addContact, addNewMessage, \r\n    editUserNameInConversations, editGroupName, editGroupDescription, setIsActive, updateIsActive } from \"../redux/Slices/userSlice\"\r\nimport events from \"./events\"\r\n\r\nlet socket = null\r\nconst ENDPOINT = process.env.REACT_APP_BASE_URL \r\nconst options = {transports: ['websocket', 'polling', 'flashsocket']}\r\n\r\n/// connect to server\r\nexport const connect = (_id, dispatch) => {\r\n\r\n    socket = io(ENDPOINT, options)\r\n    console.log(\"socket connected\")\r\n    socket.emit(events.join, _id)\r\n    dispatch(setIsActive(true))\r\n}\r\n\r\n//// send from client to server \r\nexport const send = (event, data) => {\r\n    if (socket) {\r\n        socket.emit(event, data)\r\n    }\r\n    else {\r\n        console.log(\"no socket was connected\")\r\n    }\r\n}\r\n\r\n///// receive from server\r\nexport const receive = (event, set) => {\r\n    if (socket) {\r\n        socket.on(event, (data) => {\r\n            set(data)\r\n        })\r\n    }\r\n    else {\r\n        console.log(\"no socket was connected\")\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const editName = (event, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            dispatch(editUserNameInConversations(data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateOnlineStatus = (event, user, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            dispatch(updateIsActive(data))\r\n            if (data.userId !== user.id){\r\n                send(events.updateOnlineStatus, {...data, is_active: true, userId: user._id})\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateNewStatus = (event, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            dispatch(updateIsActive(data))\r\n\r\n        })\r\n    }\r\n}\r\n\r\n// connect newly added member to socket room\r\nexport const connectToNewGroup = (event, user, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, ({ member, group }) => {\r\n            if (user._id === member._id) {\r\n                dispatch(fetchGroup(group._id, user, (data) => dispatch(addGroup(data))))\r\n                // dispatch(addGroup(group))\r\n                // send(events.joinGroup, { group, is_active: true, userId: user._id })\r\n                // send(events.updateOnlineStatus, { type: \"group\", _id: group._id, is_active: true, userId: user._id})\r\n\r\n                console.log(\"connectToNewGroup successful\")\r\n            }\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport const editSpecificGroupName = (event, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            dispatch(editGroupName(data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const editSpecificGroupDes = (event, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            dispatch(editGroupDescription(data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const newMessage = (event, dispatch) => {\r\n    console.log(\"hello world\")\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            dispatch(addNewMessage(data))\r\n            console.log(`new ${data.type} message `)\r\n    })\r\n    }\r\n}\r\n\r\n//// Delete All Messages (either from Contact or Group)\r\nexport const deleteMessages = (event, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            dispatch(deleteAllMessages(data))\r\n        })\r\n    }\r\n}\r\n\r\n/// add new contact\r\n\r\nexport const addNewContact = (event, user, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            const members = data.members\r\n            console.log(\"from io addNewContact\")\r\n            if (members[0].email === user.email){\r\n                dispatch(addContact(data))\r\n                send(events.joinContact, { contact: data, is_active: true, userId: user._id })\r\n            }\r\n            if (members[1].email === user.email){\r\n                dispatch(addContact(data))\r\n                send(events.joinContact, { contact: data, is_active: true, userId: user._id })\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n/// update block\r\nexport const blockStatus = (event, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            dispatch(updateBlockStatus(data))\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// add new member to group\r\nexport const addMember = (event, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            console.log(\"addMember successful\")\r\n            dispatch(updateGroup(data))\r\n        })\r\n    }\r\n}\r\n\r\n// update members\r\nexport const onLeaveGroup = (event, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            console.log(\"remove member successful\")\r\n            dispatch(updateGroup(data))\r\n        })\r\n    }\r\n}\r\n\r\n// delete group\r\nexport const deleteGroup = (event, dispatch) => {\r\n    if(socket) {\r\n        socket.on(event, (data) => {\r\n            console.log(\"deleteGroup successful\")\r\n            dispatch(removeGroup(data))\r\n        })\r\n    }\r\n}\r\n\r\n///// disconnect from server\r\nexport const disconnect = () => {\r\n    if (socket) {\r\n        socket.disconnect()\r\n        console.log(\"socket disconnected\")\r\n\r\n    }\r\n    else {\r\n        console.log(\"no socket was connected\")\r\n    }\r\n\r\n}","import * as api from \"../../api/index\"\r\nimport * as io from \"../../sockets/io\"\r\nimport events from \"../../sockets/events\"\r\nimport { addNewMessage, addGroup, login, setError, setIsActive, setIsLoggedIn, \r\n    editUserName, editGroupName, editGroupDescription } from \"../Slices\"\r\n\r\n// USER ACTIONS\r\n\r\nexport const fetchCreateUser = (body) => async (dispatch) => {\r\n    try {\r\n\r\n        const res = await api.fetchCreateUser(body)\r\n        dispatch(login(res.data[0]))\r\n        dispatch(setIsLoggedIn(true))\r\n        dispatch(setIsActive(true))\r\n        console.log(\"fetchCreateUser\")\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err}))\r\n        console.log(err)\r\n        \r\n    }\r\n}\r\n\r\nexport const userExists = (email, next) => async (dispatch) => {\r\n    try {\r\n        const res = await api.userExists(email)\r\n        next(res.data)\r\n        console.log(\"userExists: all good\")\r\n    } \r\n    catch (err) {\r\n        dispatch(setError({error:err}))\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const fetchUserById = (id, next) => async (dispatch) => {\r\n    try {\r\n        const res = await api.fetchUserById(id)\r\n        next(res.data)\r\n        console.log(\"user fetched\")\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const fetchUserByEmail  = (email, next) => async (dispatch) => {\r\n    try {\r\n        const res = await api.fetchUserByEmail(email) \r\n        next(res.data[0])\r\n        console.log(\"fetchUserByEmail\")\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const updateUserName = (id, body, user) => async (dispatch) => {\r\n    try {\r\n        const res = await api.updateUserName(id, body)\r\n        res && console.log(\"Username Updated :-)\")\r\n        io.send(events.editName, { _id: user._id, username: body.username, contacts: user.contacts, groups: user.groups })\r\n        dispatch(editUserName(body.username))\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(\"err occured\")\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n// Yet to do\r\nexport const updateUserPhoto = (id, body) => async (dispatch) => {\r\n    try {\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\n// CONTACT ACTIONS\r\n\r\nexport const fetchContact = (id, user, next) => async (dispatch) => {\r\n    try {\r\n        const res = await api.fetchContact(id)\r\n        next(res.data)\r\n        io.send(events.joinContact, {contact: res.data, is_active: true, userId: user._id})\r\n        console.log(\"fetchContact: all good\")\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const createContact = (body, members) => async (dispatch) => {\r\n    try {\r\n        const res = await api.createContact(body)\r\n        res && console.log(\"Contact Created\")\r\n        console.log(\"createContact: all good\")\r\n        io.send(events.addNewContact, {...res.data, members: members})\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n} \r\n\r\nexport const newContactMessage = (id, body, user) => async (dispatch) => {\r\n    try {\r\n        const res = await api.newContactMessage(id, body)\r\n        res && console.log(\"Message sent\")\r\n        dispatch(addNewMessage({ _id: id, type: \"contact\", message: {...res.data, from: user } }))\r\n        io.send(events.newMessage, { _id: id, type: \"contact\", message: {...res.data, from: user } })\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\n// Yet to do\r\nexport const updateRequest = (id, body) => async (dispatch) => {\r\n    try {\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const updateBlock = (id, body) => async (dispatch) => {\r\n    try {\r\n        const res = await api.updateBlock(id, body)\r\n        res && console.log(\"Block Status Changed\")\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\nexport const deleteContactMessage = (id, body) => async (dispatch) => {\r\n    try {\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const deleteContactMessages = (id) => async (dispatch) => {\r\n    try {\r\n        const res = await api.deleteContactMessages(id)\r\n        res && console.log(\"All messages deleted\")\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\n// Yet to do\r\nexport const deleteContact = (id) => async (dispatch) => {\r\n    try {\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\n// GROUP ACTIONS\r\n\r\nexport const fetchGroup = (id, user, next) => async (dispatch) => {\r\n    try {\r\n        const res = await api.fetchGroup(id)\r\n        next(res.data)\r\n        console.log(\"fetchGroup: all good\")\r\n        io.send(events.joinGroup, {group: res.data, is_active: true, userId: user._id})\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n} \r\n\r\nexport const createGroup = (body, user) => async (dispatch) => {\r\n    try {\r\n        const res = await api.createGroup(body)\r\n        res && console.log(\"Group created\")\r\n        const group = {...res.data, members: [user] }\r\n        dispatch(addGroup(group))\r\n        io.send(events.joinGroup, {group, is_active: true, userId: user._id})\r\n        // console.log({...res.data, members: [user] })\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n} \r\n\r\nexport const newGroupMessage = (id, body, user) => async (dispatch) => {\r\n    try {\r\n        const res = await api.newGroupMessage(id, body)\r\n        res && console.log(\"Message sent\")\r\n        dispatch(addNewMessage({ _id: id, type: \"group\", message: {...res.data, from: user } }))\r\n        io.send(events.newMessage, { _id: id, type: \"group\", message: {...res.data, from: user } })\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const addMember = (id, body) => async (dispatch) => {\r\n    try {\r\n        const res = await api.addMember(id, body)\r\n        res && console.log(\"Member Added\")\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const updateName = (id, body) => async (dispatch) => {\r\n    try {\r\n        const res = await api.updateName(id, body)\r\n        res && console.log(\"Group name updated :-)\")\r\n        io.send(events.editGroupName, { _id: id, groupname: body.groupname })\r\n        dispatch(editGroupName({ _id: id, groupname: body.groupname }))\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const updatePhoto = (id, body) => async (dispatch) => {\r\n    try {\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const updateDescription = (id, body) => async (dispatch) => {\r\n    try {\r\n        const res = await api.updateDescription(id, body)\r\n        res && console.log(\"Group description updated :)\")\r\n        io.send(events.editGroupDescription, { _id: id, description: body.description })\r\n        dispatch(editGroupDescription({ _id: id, description: body.description }))\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\n// Yet to do\r\nexport const deleteGroupMessage = (id, body) => async (dispatch) => {\r\n    try {\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const deleteGroupMessages = (id) => async (dispatch) => {\r\n    try {\r\n        const res = await api.deleteGroupMessages(id)\r\n        res && console.log(\"All Group Messages Deleted\")\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const deleteMember = (id, userId) => async (dispatch) => {\r\n    try {\r\n        const res = await api.deleteMember(id, userId)\r\n        res && console.log(\"deleteMember: all good\")\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\nexport const deleteGroup = (id) => async (dispatch) => {\r\n    try {\r\n        const res = await api.deleteGroup(id)\r\n        res && console.log(\"Group Deleted :)\")\r\n\r\n    }\r\n    catch (err) {\r\n        dispatch(setError({error:err})) \r\n        console.log(err)\r\n    }\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport './InputSection.css'\r\nimport { GrEmoji } from 'react-icons/gr';\r\nimport { BiImageAdd } from 'react-icons/bi';\r\nimport { selectContacts, selectGroups, selectUser } from '../../../redux/Slices';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectToggleConversation } from '../../../redux/Slices';\r\nimport { newContactMessage, newGroupMessage } from './../../../redux/actions/actions';\r\nimport Picker from 'emoji-picker-react';\r\nfunction InputSection() {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(selectUser)\r\n    const toggleConversation = useSelector(selectToggleConversation)\r\n    const groups = useSelector(selectGroups)\r\n    const contacts = useSelector(selectContacts)\r\n    const [input, setinput] = useState(\"\")\r\n    const [conversation, setconversation] = useState({})\r\n    const [showPicker, setshowPicker] = useState(false)\r\n    useEffect(() => {\r\n        if (toggleConversation.type === \"contact\") {\r\n             const foundConversation =contacts.find( contact => contact._id === toggleConversation._id)\r\n            setconversation(foundConversation)\r\n        } \r\n        else {\r\n            const foundConversation =groups.find( group => group._id === toggleConversation._id)\r\n            setconversation(foundConversation) \r\n        }\r\n        setinput(\"\")\r\n        setshowPicker(false)\r\n        \r\n    }, [toggleConversation._id, toggleConversation.type, contacts, groups])\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault()\r\n        if (input.trim()) {\r\n            const id = toggleConversation._id\r\n            const message = {\r\n                from: user._id,\r\n                body: input,\r\n                timestamp: Date.now()\r\n            }\r\n            if (toggleConversation.type === \"contact\") {\r\n\r\n                dispatch(newContactMessage(id, { message: message }, user))\r\n                \r\n            }\r\n            else {\r\n            \r\n                dispatch(newGroupMessage(id, { message: message }, user))\r\n\r\n            }\r\n        }\r\n        setinput(\"\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { conversation &&\r\n            <div className=\"inputSection\">\r\n                {!conversation?.block?.status &&\r\n                <>\r\n                    <form>\r\n                        <input type=\"text\"  value={input}  placeholder=\"write message\" onChange={(e) => { setinput(e.target.value) }} onClick={() => setshowPicker(false)} />\r\n                        <button type=\"submit\" onClick={sendMessage} >Send</button>\r\n                    </form>\r\n                    <div className=\"inputSection_icons\">\r\n                            <GrEmoji onClick={() => setshowPicker(!showPicker)} title=\"emoji\" />\r\n                            <div className=\"emojiPicker\" style={{ display: showPicker? \"inline\" : \"none\" }} >\r\n                            <Picker \r\n                                onEmojiClick={(event, emojiObject) => setinput(input + \" \" + emojiObject.emoji)}\r\n                                disableSearchBar={true}\r\n                             />\r\n\r\n                            </div>\r\n                            <BiImageAdd title=\"Not working yet\" />\r\n                    </div>\r\n                </>\r\n                }\r\n                {conversation?.block?.status &&\r\n                    <p style={{ fontSize: \"1.3rem\" }}>{conversation?.block?.from === user.email ? \r\n                        \"Unblock contact to send messages\" :\r\n                        \"You have been blocked\"}\r\n                    </p>\r\n\r\n                }\r\n                \r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default InputSection\r\n","import React from 'react'\r\nimport ChatHeader from './ChatHeader/ChatHeader'\r\nimport ChatMessages from './ChatMessages/ChatMessages'\r\nimport InputSection from './InputSection/InputSection'\r\nimport './ChatSection.css'\r\nimport { selectToggleConversation, selectUser } from '../../redux/Slices'\r\nimport { useSelector } from 'react-redux'\r\n            \r\n\r\nfunction ChatSection() {\r\n    const toggleConversation = useSelector(selectToggleConversation)\r\n    const user = useSelector(selectUser)\r\n\r\n    return (\r\n        < >\r\n        {!toggleConversation.type? \r\n        <div className='chatSection_empty'>\r\n            <h1>Welcome, {user.username}<br/>\r\n                Click on conversation to get started\r\n            </h1>\r\n            \r\n        </div>:\r\n        <div className='chatSection'>\r\n            <ChatHeader />\r\n            <ChatMessages />\r\n            <InputSection />\r\n        </div>\r\n        }\r\n        </>\r\n        \r\n    )\r\n}\r\n \r\nexport default ChatSection\r\n","import React, { useEffect, useState } from 'react'\r\nimport './ContactProfile.css'\r\nimport { CgClose } from 'react-icons/cg';\r\nimport { GoPrimitiveDot } from 'react-icons/go';\r\nimport { selectContacts, selectGroups, selectToggleConversation, setToggleConversation, \r\n    deleteAllMessages, updateBlockStatus } from '../../../redux/Slices';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectUser } from '../../../redux/Slices';\r\nimport { deleteContactMessages, updateBlock } from '../../../redux/actions/actions';\r\nimport * as io from \"../../../sockets/io\"\r\nimport events from '../../../sockets/events';\r\n\r\nfunction ContactProfile() {\r\n\r\n    const user = useSelector(selectUser)\r\n    const dispatch = useDispatch()\r\n    const groups = useSelector(selectGroups)\r\n    const contacts = useSelector(selectContacts)\r\n    const toggleConversation = useSelector(selectToggleConversation)\r\n    const [otherContact, setotherContact] = useState({})\r\n    const [conversation, setconversation] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if (toggleConversation.type === \"contact\") {\r\n             const temp =contacts.find( contact => contact._id === toggleConversation._id)\r\n            setconversation(temp)\r\n            \r\n        }\r\n        \r\n    }, [toggleConversation._id, toggleConversation.type, contacts, groups])\r\n\r\n    useEffect( () => {\r\n\r\n        if (conversation) {\r\n            if (user._id !== conversation.members[0]._id) { \r\n                setotherContact(conversation.members[0]) \r\n            } \r\n            else { \r\n                setotherContact(conversation.members[1])  \r\n            }\r\n        }\r\n    }\r\n    ,[conversation, user._id])\r\n\r\n    const handleBlock = () => {\r\n\r\n        if (!conversation?.block?.status) {\r\n            // console.log(\"Blocked\")\r\n            const newBlock = { from: user.email, status: true }\r\n            dispatch(updateBlock(conversation._id, { block: newBlock }))\r\n            dispatch(updateBlockStatus({ _id: conversation._id, block: newBlock }))\r\n            io.send(events.updateBlock, { _id: conversation._id, block: newBlock })\r\n        \r\n        }\r\n        else {\r\n            // console.log(\"UnBlocked\")\r\n            const newBlock = { from: user.email, status: false }\r\n            dispatch(updateBlock(conversation._id, { block: newBlock }))\r\n            dispatch(updateBlockStatus({ _id: conversation._id, block: newBlock }))\r\n            io.send(events.updateBlock, { _id: conversation._id, block: newBlock })\r\n\r\n        }\r\n    }\r\n\r\n    // Delete All Conversation Messages     \r\n    const [deleteMessagesDisplay, setdeleteMessagesDisplay] = useState(\"none\")\r\n    const DeleteContactMessages = () => {\r\n\r\n        const DELETE = () => {\r\n\r\n            dispatch(deleteContactMessages(conversation._id))\r\n            dispatch(setToggleConversation({ ...toggleConversation, toggle: false }))\r\n            dispatch(deleteAllMessages({ _id: conversation._id, type: \"contact\" }))\r\n            io.send(events.deleteContactMessages, { _id: conversation._id, type: \"contact\" })\r\n        }\r\n        return(\r\n            <div className=\"deleteMessages\"  style={{ display: `${deleteMessagesDisplay}`}}>\r\n                <span>Are you sure you wanna \"DELETE ALL MESSAGES\" &lt;&lt;{conversation?.groupname}&gt;&gt;?</span>\r\n                <p onClick={() => DELETE() }>Yes</p>\r\n                <p onClick={() => setdeleteMessagesDisplay(\"none\")}>No</p>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"contactProfile\">\r\n            <div className=\"contactProfile_top\">\r\n                <p>Contact info</p>\r\n                <CgClose onClick={ () => dispatch(setToggleConversation({ ...toggleConversation, type:\"contact\", toggle: false}))}/>\r\n            </div>\r\n            <div className=\"contactProfile_scroll\">\r\n                <div className=\"contactProfile_middle\">\r\n                    <img src={otherContact.photoUrl} alt=\"\" />\r\n                    <p style={ {color: otherContact.is_active? \"green\" : \"grey\" } }>\r\n                        <GoPrimitiveDot  />\r\n                        {otherContact.is_active? \"Online\" : \"Offline\"}\r\n                    </p>\r\n                </div>\r\n                <div className=\"contactProfile_details\">\r\n                    <p>{otherContact.username}</p>\r\n                    <span>{otherContact.email}</span>\r\n                </div>\r\n                \r\n                <div className=\"contactProfile_bottom\">\r\n                    {!conversation?.block?.status && <button className=\"contactProfile_block\" onClick={handleBlock}>Block Contact</button>}\r\n                    {conversation?.block?.status && conversation?.block?.from === user.email &&\r\n                     <button className=\"contactProfile_block\" onClick={handleBlock}>Unblock Contact</button>}\r\n                     {conversation?.block?.status && conversation?.block?.from !== user.email &&\r\n                     <h3>You have been <span style={{ fontSize: \"1.1rem\", color: \"red\"}}>\"BLOCKED\"</span> by {otherContact.username}</h3>}\r\n                    \r\n                    {conversation?.messages.length > 0 && !conversation?.block?.status && \r\n                    <button onClick={() => setdeleteMessagesDisplay(\"flex\")}>Delete All Messages</button>}\r\n                    <DeleteContactMessages />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ContactProfile\r\n","import firebase from \"firebase\"\r\n              \r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROGECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n};\r\n \r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nconst auth = firebase.auth();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\n\r\nexport default db\r\n\r\n","import React, { useState } from 'react'\r\nimport './UserProfile.css'\r\nimport { CgClose } from 'react-icons/cg';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { logout, selectUser } from \"../../../redux/Slices\" \r\nimport { auth } from \"../../../firebase\"\r\nimport { setToggleProfile } from '../../../redux/Slices';\r\nimport { updateUserName } from '../../../redux/actions/actions';\r\nimport { GoPrimitiveDot } from 'react-icons/go';\r\n\r\n\r\n\r\nfunction UserProfile() {\r\n\r\n    const user = useSelector(selectUser)\r\n    const dispatch = useDispatch()\r\n    const [newName, setnewName] = useState(\"\")\r\n    const [editDisplay, seteditDisplay] = useState(\"none\")\r\n\r\n    const Logout = () => {\r\n        dispatch(setToggleProfile(false))\r\n        dispatch(logout())\r\n        auth.signOut()\r\n    }\r\n\r\n    const changeName = (e) => {\r\n        e.preventDefault()\r\n        if (newName.trim()) {\r\n            dispatch(updateUserName(user._id, { username: newName.trim() }, user))\r\n            setnewName(\"\")\r\n            seteditDisplay(\"none\")\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"userProfile\">\r\n            <div className=\"userProfile_top\">\r\n                <p>Profile</p>\r\n                <CgClose onClick={ (e) => {dispatch(setToggleProfile(false))}}/>\r\n            </div>\r\n            <div className=\"userProfile_middle\">\r\n                <img src={user.photoUrl} alt=\"\" />\r\n                <p style={ {color: user.is_active? \"green\" : \"grey\" } }>\r\n                    <GoPrimitiveDot  />\r\n                    {user.is_active? \"Online\" : \"Offline\"}\r\n                </p>\r\n            </div>\r\n            <div className=\"userProfile_bottom\">\r\n                <form onSubmit={changeName} name=\"changeName\" style={{ display: editDisplay }} >\r\n                        <input value={newName} type=\"text\"  placeholder=\"Enter name\" onChange={ (e) => setnewName(e.target.value)} />\r\n                        <button type=\"submit\" >Rename</button>\r\n                        <button onClick={() => { \r\n                            setnewName(\"\")\r\n                            seteditDisplay(\"none\")}} >Cancel\r\n                        </button>\r\n                </form>\r\n                <p>{user.username} <span onClick={() => seteditDisplay(\"flex\")}>Edit</span></p>\r\n                <span>{user.email}</span>\r\n            </div>\r\n            <button onClick={Logout} className=\"userProfile_logout\">Logout</button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default UserProfile\r\n","import React, { useEffect, useState } from 'react'\r\nimport './ContactConversation.css'\r\nimport { IoMdArrowDropright } from 'react-icons/io';\r\n// import { GoPrimitiveDot } from 'react-icons/go';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectUser } from '../../../redux/Slices';\r\nimport { selectToggleConversation, setToggleConversation } from '../../../redux/Slices';\r\nimport moment from \"moment\"\r\n\r\n\r\n\r\n\r\nfunction ContactConversation( {contact}) {\r\n    \r\n    const dispatch = useDispatch()\r\n    const user = useSelector(selectUser)\r\n    const toggleConversation = useSelector(selectToggleConversation)\r\n    const [otherContact, setotherContact] = useState({})\r\n   \r\n    useEffect( () => {\r\n\r\n        if (user._id !== contact.members[0]._id) { \r\n            setotherContact(contact.members[0]) \r\n        } \r\n        else { \r\n            setotherContact(contact.members[1])  \r\n        }\r\n        \r\n    },[contact.members, user._id])\r\n\r\n    return (\r\n        <div className=\"contactConversation\" \r\n            onClick={ () => { dispatch(setToggleConversation({ ...toggleConversation, _id: contact._id, type:\"contact\", toggle: false })) }}>\r\n            <div className=\"contactConversation_left\">\r\n                <Avatar src={otherContact.photoUrl} />\r\n            </div>\r\n            <div className=\"contactConversation_right\">\r\n                <div className=\"contactConversation_right_top\">\r\n                    <p>{otherContact.username}</p>\r\n                    <span>{contact.last_message && moment(contact.last_message.timestamp).calendar() }</span>\r\n                    <IoMdArrowDropright title=\"Not working yet\" />\r\n                </div>\r\n                <div className=\"contactConversation_right_bottom\">\r\n                    <p>{contact.last_message? contact.last_message.body : \"No messages\"}</p>\r\n                    {/* <GoPrimitiveDot style={ {color: \"green\" } } /> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactConversation\r\n","import React from 'react'\r\nimport \"./GroupConversation.css\"\r\nimport { IoMdArrowDropright } from 'react-icons/io';\r\n// import { GoPrimitiveDot } from 'react-icons/go';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { selectToggleConversation, setToggleConversation } from '../../../redux/Slices';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from \"moment\"\r\n\r\n\r\nfunction GroupConversation( { group } ) {\r\n\r\n    const dispatch = useDispatch()\r\n    const toggleConversation = useSelector(selectToggleConversation)\r\n    \r\n    return (\r\n        <div className=\"groupConversation\"\r\n            onClick={ () => {dispatch(setToggleConversation({ ...toggleConversation, _id: group._id, type: \"group\", toggle: false})) }}\r\n            >\r\n            <div className=\"groupConversation_left\">\r\n                <Avatar src=\"\" />\r\n            </div>\r\n            <div className=\"groupConversation_right\">\r\n                <div className=\"groupConversation_right_top\">\r\n                    <p>{group.groupname}</p>\r\n                    <span>{group.last_message && moment(group.last_message.timestamp).calendar()}</span>\r\n                    <IoMdArrowDropright title=\"Not working yet\" />\r\n                </div>\r\n                <div className=\"groupConversation_right_bottom\">\r\n                    <p>{group.last_message? group.last_message.body : \"No messages\"}</p>\r\n                    {/* <GoPrimitiveDot style={ {color: \"green\", display: \"inline\" } } /> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GroupConversation\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./SidebarHeader.css\"\r\nimport { Avatar } from '@material-ui/core';\r\nimport { GoPlus } from 'react-icons/go';\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { selectContacts, selectUser } from '../../../redux/Slices';\r\nimport { setToggleProfile } from '../../../redux/Slices';\r\nimport { createGroup, fetchUserByEmail, userExists } from '../../../redux/actions/actions';\r\nimport { createContact } from './../../../redux/actions/actions';\r\n\r\n\r\nfunction SidebarHeader() {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(selectUser)\r\n    const [moreDisplay, setmoreDisplay] = useState(\"none\")\r\n\r\n    return (\r\n        <div className=\"sidebarHeader\">\r\n            <div className=\"sidebarHeader_left\" onClick={ () => dispatch(setToggleProfile(true))}>\r\n                <div className=\"sidebarHeader_avatar\">\r\n                    <Avatar src={user.photoUrl}/>\r\n                </div>\r\n                <span>{user.username}</span>\r\n            </div>\r\n            <div className=\"sidebarHeader_icons\">\r\n                <GoPlus onClick={() => { setmoreDisplay(\"flex\") }} />\r\n                <AddOptions moreDisplay={moreDisplay} setmoreDisplay={setmoreDisplay}/>    \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction AddOptions ( { moreDisplay, setmoreDisplay }) {\r\n\r\n    const [addGroupDisplay, setaddGroupDisplay] = useState(\"none\")\r\n    const [addContactDisplay, setaddContactDisplay] = useState(\"none\")\r\n\r\n    return (\r\n        <>\r\n            <div className=\"addOptions\" style={{ display: `${moreDisplay}`}}>\r\n                <p onClick={() => {\r\n                    setmoreDisplay(\"none\")\r\n                    setaddGroupDisplay(\"flex\")\r\n                    }}>Add Group</p>\r\n                <p onClick={() => {\r\n                    setmoreDisplay(\"none\")\r\n                    setaddContactDisplay(\"flex\")\r\n                    }}>Add Contact</p>\r\n                <p onClick={() => setmoreDisplay(\"none\")} >Cancel</p>\r\n            </div>\r\n            <AddContactOptions addContactDisplay={addContactDisplay} setaddContactDisplay={setaddContactDisplay}/>\r\n            <AddGroupOptions addGroupDisplay={addGroupDisplay} setaddGroupDisplay={setaddGroupDisplay} />\r\n        </>\r\n    )\r\n}\r\n\r\nfunction AddGroupOptions( {addGroupDisplay, setaddGroupDisplay}) {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(selectUser)\r\n    const [name, setname] = useState(\"\")\r\n    const [description, setdescription] = useState(\"\")\r\n\r\n    const handleAddGroup = () => {\r\n        if (name.trim()){\r\n\r\n            const group = {  \r\n                groupname: name,\r\n                description: description,\r\n                created_at: Date.now(),\r\n                members: [ user._id ],\r\n                messages: []\r\n            }\r\n\r\n            dispatch(createGroup({ group: group}, user))\r\n            setname(\"\")\r\n            setdescription(\"\")\r\n            setaddGroupDisplay(\"none\")\r\n    \r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"addGroupOptions\" style={{ display: `${addGroupDisplay}` }}>\r\n            <div className=\"addGroupOptions_name \">\r\n                <input value={name} onChange={ (e) => setname(e.target.value)} required type=\"text\"  placeholder=\"Group name\" />\r\n            </div>\r\n            <div className=\"addGroupOptions_des\">\r\n                <textarea value={description} spellCheck placeholder=\"Description\" rows=\"3\" name=\"Description\" onChange={ (e) => setdescription(e.target.value)} />\r\n            </div>\r\n            <div  className=\"addGroupOptions_button\">\r\n                <p  type=\"submit\" onClick={handleAddGroup}>Create</p>\r\n                <p  onClick={() => {\r\n                    setname(\"\")\r\n                    setdescription(\"\")\r\n                    setaddGroupDisplay(\"none\")}}>Cancel</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction AddContactOptions( {addContactDisplay, setaddContactDisplay}) {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(selectUser)\r\n    const contacts = useSelector(selectContacts)\r\n    const [email, setemail] = useState(\"\")\r\n    const [exist, setexist] = useState(\"\")\r\n    const [result, setresult] = useState(null)\r\n    const [message, setmessage] = useState(\"\")\r\n\r\n    const handleSearchContact = (e) => {\r\n        e.preventDefault()\r\n        dispatch(userExists(email, setresult))\r\n    }\r\n\r\n    const handleAddContact = () => {\r\n        dispatch(fetchUserByEmail(email, setresult))\r\n    }\r\n    \r\n    useEffect(() => {\r\n\r\n        if (result === true) {\r\n            setexist(\"yes\")\r\n            console.log(\"result true\")\r\n            console.log(result)\r\n            setmessage(\"User exists\")\r\n            \r\n\r\n        }\r\n        if (result === false) {\r\n            setexist(\"no\")\r\n            setmessage(\"User doesn't exist\")\r\n            console.log(\"result false\")\r\n            console.log(result)\r\n            \r\n\r\n        }\r\n        \r\n        if (result?.email === email && result?.email !== user.email ) {\r\n            const createNewContact = () => {\r\n\r\n                const alreadyExist = contacts.find( (contact) => (contact.members[0]._id === result._id || contact.members[1]._id === result._id))\r\n                console.log(\"already\")\r\n                console.log(alreadyExist)\r\n                if (!alreadyExist) {\r\n                    const contact = {\r\n                        members: [user._id, result._id]\r\n                    }\r\n                    const members = [user, result]\r\n                    dispatch(createContact({ contact: contact }, members))\r\n                    setexist(\"done\")\r\n                    setemail(\"\")\r\n                    setmessage(\"Contact Created\")\r\n                    // setaddContactDisplay(\"none\")\r\n        \r\n                }\r\n                else {\r\n                    console.log(\"Contact not created as it already exits\")\r\n                    setexist(\"done\")\r\n                    setemail(\"\")\r\n                    setmessage(\"Contact Already Exists\")\r\n                }\r\n            }\r\n\r\n            createNewContact()\r\n            \r\n        }\r\n        else if (result?.email === user.email) {\r\n            setexist(\"done\")\r\n            setemail(\"\")\r\n            setmessage(`Lol, this is you email, ${user.username.split(\" \")[0]} try again`)\r\n        }\r\n     \r\n    }, [result, email, user, contacts, dispatch])\r\n\r\n    return (\r\n        <div className=\"addContact\" style={{ display: `${addContactDisplay}` }}>\r\n            <form onSubmit={handleSearchContact}>\r\n                <input value={email} style={{ display: exist === \"done\"? \"none\" : \"inline\" }}\r\n                    onChange={ (e) => setemail(e.target.value.trim())} \r\n                    required type=\"email\"  \r\n                    title=\"format: xxx@gmail.com\"\r\n                    placeholder=\"exple@gmail.com\" />\r\n                {email.length > 5 && \r\n                <button type=\"submit\" style={{ display: exist === \"\"? \"inline\" : \"none\" }}>Search</button>}\r\n            </form>\r\n            {message && <span>{message}</span>}\r\n            <p className=\"addContactAdd\" style={{ display: exist === \"yes\"? \"inline\" : \"none\" }}\r\n                onClick={handleAddContact}>Add\r\n            </p>\r\n    \r\n            <p className=\"addContactCancel\"onClick={() => {\r\n                setexist(\"\")\r\n                setemail(\"\")\r\n                setmessage(\"\")\r\n                setresult(null)\r\n                setaddContactDisplay(\"none\")}}>Cancel\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarHeader\r\n","import React from 'react'\r\nimport \"./SidebarSubHeader.css\"\r\nimport { GrSearch } from 'react-icons/gr';\r\nimport { CgClose } from 'react-icons/cg';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { selectSearchInput, selectSidebarSearch, setSearchInput, setShowConversation, setSidebarSearch } from \"../../../redux/Slices\"\r\n\r\nfunction SidebarSubHeader() {\r\n\r\n    const search = useSelector(selectSidebarSearch)\r\n\r\n    return (\r\n        <div className=\"sidebarSubHeader\">\r\n            { !search?  <SubHeader /> : <SearchBar />}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SearchBar = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const input = useSelector(selectSearchInput)\r\n\r\n    return (\r\n        <div className=\"searchBar\" >\r\n            <form>\r\n                <input value={input} onChange={(e) => { \r\n                        dispatch(setSearchInput(e.target.value))\r\n                        dispatch(setShowConversation( \"searchResults\" ))\r\n                        }} \r\n                    type=\"text\" placeholder=\"Search\"  />\r\n                <button onClick={ (e) => { \r\n                        e.preventDefault()\r\n                        dispatch(setShowConversation( \"searchResults\" ))\r\n\r\n                     }} \r\n                    type=\"submit\" >Search</button>\r\n            </form>\r\n            <CgClose className=\"searchBar_close\" onClick={ () => {\r\n                        dispatch(setSidebarSearch(false))\r\n         \r\n                } }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SubHeader = ({setshowSearch}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n            <div className=\"sidebarSubHeader_elements\" >\r\n                <div className=\"sidebarSubHeader_search\">\r\n                <   GrSearch onClick={() =>  {\r\n                    dispatch(setSearchInput(\"\"))\r\n                    dispatch(setSidebarSearch(true))\r\n                     }}/>\r\n                </div>\r\n                <span onClick={() => dispatch(setShowConversation( \"contacts\" )) }  >Contacts</span>\r\n                <span onClick={() => dispatch(setShowConversation( \"groups\" ))} >Groups</span>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default SidebarSubHeader\r\n","import React from 'react'\r\nimport ContactConversation from './Conversation/ContactConversation'\r\nimport GroupConversation from './Conversation/GroupConversation'\r\nimport SidebarHeader from \"./SidebarHeader/SidebarHeader\"\r\nimport SidebarSubHeader from \"./SidebarSubHeader/SidebarSubHeader\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectGroups, selectUser, selectContacts } from '../../redux/Slices';\r\nimport { selectSearchInput, selectShowConversation } from '../../redux/Slices';\r\nimport \"./Sidebar.css\"\r\n\r\nfunction Sidebar() {\r\n\r\n    const user = useSelector(selectUser)\r\n    const showConversation = useSelector(selectShowConversation)\r\n    const searchInput = useSelector(selectSearchInput)\r\n    const groups = useSelector(selectGroups)\r\n    const contacts = useSelector(selectContacts)\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <SidebarHeader />\r\n            <SidebarSubHeader />\r\n            {showConversation === \"contacts\" && \r\n            ( \r\n                <div className=\"sidebar_bottom\" >\r\n                    {contacts && contacts.map((contact) => \r\n                    <ContactConversation key={contact._id} contact={contact}/>)\r\n                    }\r\n                   \r\n                </div>\r\n         \r\n            )}\r\n            {showConversation === \"groups\" &&\r\n            ( \r\n                <div className=\"sidebar_bottom\" >\r\n                    {groups && groups.map((group) =>\r\n                     <GroupConversation key={group._id} group={group}/>)\r\n                    }\r\n\r\n                    \r\n                </div>\r\n      \r\n            )}\r\n            {showConversation === \"searchResults\" && \r\n            ( \r\n                <div className=\"sidebar_bottom\" >\r\n                    {\r\n                        groups && (groups.map((group) => {\r\n                            let a = group.groupname.trim().toLowerCase()\r\n                            let b = searchInput.trim().toLowerCase()\r\n                            return (a.includes(b) && b && <GroupConversation key={group._id} group={group}/>)\r\n                        }))\r\n                    }\r\n                    {\r\n                        contacts && (contacts.map((contact) => {\r\n\r\n                            if (contact.members[0]._id !== user._id) {\r\n                                let a = contact.members[0].username.trim().toLowerCase()\r\n                                let b = searchInput.trim().toLowerCase()\r\n                                return (a.includes(b)  && <ContactConversation key={contact._id} contact={contact}/>)\r\n                            }\r\n                            else {\r\n                                let a = contact.members[1].username.trim().toLowerCase()\r\n                                let b = searchInput.trim().toLowerCase()\r\n                                return (a.includes(b) && b && <ContactConversation key={contact._id} contact={contact}/>)\r\n                            }\r\n                        }))\r\n                        \r\n                    }\r\n                </div>\r\n            \r\n             )}\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Sidebar\r\n","import React from 'react'\r\nimport './GroupMember.css'\r\nimport { Avatar } from '@material-ui/core';\r\nimport { GoPrimitiveDot } from 'react-icons/go';\r\n\r\nfunction GroupMember( { member }) {\r\n\r\n    return (\r\n        <div className=\"groupMember\" >\r\n            <Avatar src={member.photoUrl} />\r\n            <p>{member.username}</p>\r\n            <GoPrimitiveDot style={ {color: member.is_active? \"green\" : \"grey\" } } />\r\n  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GroupMember\r\n","import React, { useEffect, useState } from 'react'\r\nimport './GroupProfile.css'\r\nimport { CgClose } from 'react-icons/cg';\r\nimport GroupMember from './GroupMember';\r\nimport { selectGroups, selectToggleConversation, selectUser, \r\n    deleteAllMessages, setToggleConversation, removeGroup, updateGroup } from '../../../redux/Slices';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from \"moment\"\r\nimport { addMember, deleteGroup, deleteGroupMessages, deleteMember, fetchUserByEmail, updateDescription, updateName, userExists } from '../../../redux/actions/actions';\r\nimport * as io from \"../../../sockets/io\"\r\nimport events from '../../../sockets/events';\r\n\r\n\r\nfunction GroupProfile() {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(selectUser)\r\n    const groups = useSelector(selectGroups)\r\n    const toggleConversation = useSelector(selectToggleConversation)\r\n    const [conversation, setconversation] = useState(null)\r\n    const [addMemberDisplay, setaddMemberDisplay] = useState(\"none\")\r\n    const [newDescription, setnewDescription] = useState(\"\")\r\n    const [newName, setnewName] = useState(\"\")\r\n    \r\n    useEffect(() => {\r\n        if (toggleConversation.type === \"group\") {\r\n            const temp = groups.find( group => group._id === toggleConversation._id)\r\n            setconversation(temp) \r\n        } \r\n        \r\n    }, [toggleConversation._id, toggleConversation.type, groups, groups.members])\r\n    \r\n\r\n    // Leave Group\r\n    const [leaveGroupDisplay, setleaveGroupDisplay] = useState(\"none\")\r\n    const LeaveGroup = () => {\r\n\r\n        const LEAVE = () => {\r\n            dispatch(deleteMember(conversation?._id, user._id))\r\n            let members = []\r\n            conversation.members.forEach( member => {\r\n                if (member._id !== user._id) {\r\n                    members.push(member)\r\n                }\r\n            })\r\n            \r\n            dispatch(removeGroup({ _id: conversation._id }))\r\n            io.send(events.leaveGroup, { _id: conversation._id, group: {...conversation, members: members } })\r\n            dispatch(setToggleConversation({ ...toggleConversation, type: \"\", _id: null, toggle: false }))\r\n\r\n        }\r\n        \r\n        return (\r\n            <div className=\"groupProfile_bottom_LD\"  style={{ display: `${leaveGroupDisplay}`}}>\r\n                <span>Are you sure you wanna leave &lt;&lt;{conversation?.groupname}&gt;&gt;?</span>\r\n                <p onClick={() => LEAVE() }>Yes</p>\r\n                <p onClick={() => setleaveGroupDisplay(\"none\")}>No</p>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    // Delete Group\r\n    const [deleteGroupDisplay, setdeleteGroupDisplay] = useState(\"none\")\r\n    const DeleteGroup = () => {\r\n\r\n        const DELETE = () => {\r\n            dispatch(deleteGroup(conversation._id))\r\n            io.send(events.deleteGroup, { _id: conversation._id })\r\n            dispatch(removeGroup({ _id: conversation._id }))\r\n            dispatch(setToggleConversation({ ...toggleConversation, type: \"\", _id: null, toggle: false }))\r\n        }\r\n\r\n        return (\r\n            <div className=\"groupProfile_bottom_LD\"  style={{ display: `${deleteGroupDisplay}`}}>\r\n                <span>Are you sure you wanna \"DELETE\" &lt;&lt;{conversation?.groupname}&gt;&gt;?</span>\r\n                <p onClick={() => DELETE() }>Yes</p>\r\n                <p onClick={() => setdeleteGroupDisplay(\"none\")}>No</p>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    // Delete All Group Messages\r\n    const [deleteGroupMessagesDisplay, setdeleteGroupMessagesDisplay] = useState(\"none\")\r\n    const DeleteGroupMessages = () => {\r\n\r\n        const DELETE = () => {\r\n            dispatch(deleteGroupMessages(conversation?._id))\r\n            setdeleteGroupMessagesDisplay(\"none\")\r\n            dispatch(setToggleConversation({ ...toggleConversation, toggle: false }))\r\n            dispatch(deleteAllMessages({ _id: conversation._id, type: \"group\" }))\r\n            io.send(events.deleteGroupMessages, { _id: conversation._id, type: \"group\" })\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"groupProfile_bottom_LD\"  style={{ display: `${deleteGroupMessagesDisplay}`}}>\r\n                <span>Are you sure you wanna \"DELETE  ALL MESSAGES\"?</span>\r\n                <p onClick={() => DELETE() }>Yes</p>\r\n                <p onClick={() => setdeleteGroupMessagesDisplay(\"none\")}>No</p>\r\n            </div>\r\n        )\r\n\r\n    }\r\n    \r\n    // Edit Group Description\r\n    const [editDesDisplay, seteditDesDisplay] = useState(\"none\")\r\n    const changeDescription = (e) => {\r\n        e.preventDefault()\r\n        if (newDescription.trim()) {\r\n            dispatch(updateDescription(conversation._id, { description: newDescription.trim() }))\r\n            setnewDescription(\"\")\r\n            seteditDesDisplay(\"none\")\r\n        }\r\n\r\n    }\r\n\r\n    //Edit Group Name\r\n    const [editNameDisplay, seteditNameDisplay] = useState(\"none\")\r\n    const changeGroupName = (e) => {\r\n        e.preventDefault()\r\n        if (newName.trim()) {\r\n            dispatch(updateName(conversation._id, { groupname: newName.trim() }))\r\n            setnewName(\"\")\r\n            seteditNameDisplay(\"none\")\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {conversation && \r\n            <div className=\"groupProfile\">\r\n                <div className=\"groupProfile_top\">\r\n                    <p>Group info</p>\r\n                    <CgClose onClick={ () => dispatch(setToggleConversation({ ...toggleConversation, type:\"group\", toggle: false}))}/>\r\n                </div>\r\n\r\n                <div className=\"groupProfile_scroll\">\r\n\r\n                    <div className=\"groupProfile_middle\">\r\n                        <img src={conversation.photoUrl} alt=\"\" />\r\n                        <div className=\"groupProfile_info\">\r\n                            <p>{conversation.groupname}<span  onClick={() => seteditNameDisplay(\"flex\")} >Edit</span></p>\r\n                            <span>created: {moment(conversation.created_at).calendar()}</span>\r\n                        </div>\r\n\r\n                        <form onSubmit={changeGroupName} name=\"changeName\" style={{ display: editNameDisplay }} >\r\n                            <input value={newName} \r\n                                type=\"text\" placeholder=\"Enter name\"\r\n                                onChange={ (e) => setnewName(e.target.value)}   />\r\n                            <button type=\"submit\" >Rename</button>\r\n                            <button onClick={() => { \r\n                                setnewName(\"\")\r\n                                seteditNameDisplay(\"none\")}} >Cancel</button>\r\n                        </form>\r\n                    </div>\r\n\r\n                    <div className=\"groupProfile_details\">\r\n                        <h5>Description <span onClick={() => seteditDesDisplay(\"flex\")}>Edit</span></h5> \r\n                        <span>\r\n                            {conversation.description? conversation.description : \"No Description\"}\r\n                        </span>\r\n\r\n                        <form onSubmit={changeDescription} name=\"changeDescription\" style={{ display: editDesDisplay }} >\r\n                            <textarea value={newDescription} spellCheck \r\n                                type=\"text\" rows=\"5\" name=\"Description\" \r\n                                placeholder=\"Enter description\"\r\n                                onChange={ (e) => setnewDescription(e.target.value)}   />\r\n                            <button type=\"submit\" >Edit</button>\r\n                            <button onClick={() => { \r\n                                setnewDescription(\"\")\r\n                                seteditDesDisplay(\"none\")}} >Cancel</button>\r\n                        </form>\r\n                    </div>\r\n                    <span>Group members</span>\r\n\r\n                    <div className=\"groupProfile_members\">\r\n                        {conversation.members.map( member => <GroupMember key={member?._id}  member={member}/>)}\r\n                        \r\n                    </div>\r\n                    \r\n                    <div className=\"groupProfile_bottom\">\r\n                        <AddMember group={conversation} addMemberDisplay={addMemberDisplay} setaddMemberDisplay={setaddMemberDisplay} />\r\n                        <button onClick={() => setaddMemberDisplay(\"flex\")}>Add Member </button>\r\n\r\n                        {conversation.members.length > 1 && \r\n                        <button onClick={() => setleaveGroupDisplay(\"flex\")}>Leave Group</button>}\r\n                        <LeaveGroup />\r\n\r\n                        {conversation?.messages.length > 0 && \r\n                        <button className=\"groupProfile_delete\" onClick={() => setdeleteGroupMessagesDisplay(\"flex\")}>Delete All Messages</button>}\r\n                        <DeleteGroupMessages />\r\n\r\n                        <button className=\"groupProfile_delete\" onClick={() => setdeleteGroupDisplay(\"flex\")}>Delete Group</button>\r\n                        <DeleteGroup />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction AddMember( {group, addMemberDisplay, setaddMemberDisplay}) {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(selectUser)\r\n    const [email, setemail] = useState(\"\")\r\n    const [exist, setexist] = useState(\"\")\r\n    const [result, setresult] = useState(null)\r\n    const [message, setmessage] = useState(\"\")\r\n\r\n    const handleSearchContact = (e) => {\r\n        e.preventDefault()\r\n        dispatch(userExists(email, setresult))\r\n    }\r\n\r\n    const handleAddMember = () => {\r\n        dispatch(fetchUserByEmail(email, setresult))\r\n    }\r\n    \r\n    useEffect(() => {\r\n\r\n        if (result === true) {\r\n            setexist(\"yes\")\r\n            console.log(\"result true\")\r\n            console.log(result)\r\n            setmessage(\"User exists\")\r\n        }\r\n        if (result === false) {\r\n            setexist(\"no\")\r\n            setmessage(\"User doesn't exist\")\r\n            console.log(\"result false\")\r\n            console.log(result)\r\n        }\r\n        \r\n        if (result?.email === email && result?.email !== user.email ) {\r\n            const alreadyExist = group.members.find( (member) => (member._id === result._id ))\r\n            if (!alreadyExist) {\r\n                dispatch(addMember(group._id, { _id : result._id }))\r\n                const members = [...group.members, result]\r\n\r\n                dispatch(updateGroup({ _id: group._id, group: {...group, members: members } }))\r\n                io.send(events.addNewMember, { _id: group._id, group: {...group, members: members }, member: result })\r\n                console.log(\"Member info sent to server\")\r\n                setexist(\"done\")\r\n                setemail(\"\")\r\n                setmessage(\"Member Added\")\r\n\r\n            }\r\n            else {\r\n                console.log(\"Member not added as already in group\")\r\n                setexist(\"done\")\r\n                setemail(\"\")\r\n                setmessage(\"Member Already Part Of Group\")\r\n            }\r\n            \r\n        }\r\n        if (result?.email === user.email ) {\r\n            console.log(\"You are a member of this group\")\r\n            setexist(\"done\")\r\n            setemail(\"\")\r\n            setresult(null)\r\n            setmessage(\"You are a member of this group \")\r\n        }\r\n     \r\n    }, [result, email, user, group, group._id, group.members, dispatch])\r\n\r\n    return (\r\n        <div className=\"addMember\" style={{ display: `${addMemberDisplay}` }}>\r\n            <form onSubmit={handleSearchContact}>\r\n                <input value={email} style={{ display: exist === \"\"? \"inline\" : \"none\" }}\r\n                    onChange={ (e) => setemail(e.target.value.trim())} \r\n                    required type=\"email\"  \r\n                    title=\"format: xxx@gmail.com\"\r\n                    placeholder=\"exple@gmail.com\" />\r\n                {email.length > 5 && \r\n                <button type=\"submit\" style={{ display: exist === \"\"? \"inline\" : \"none\" }} >Search</button>}\r\n            </form>\r\n            {message && <span>{message}</span>}\r\n            <p className=\"addMemberAdd\" style={{ display: exist === \"yes\"? \"inline\" : \"none\" }}\r\n                onClick={handleAddMember}>Add\r\n            </p>\r\n            <p className=\"addMemberCancel\"onClick={() => {\r\n                setexist(\"\")\r\n                setemail(\"\")\r\n                setmessage(\"\")\r\n                setresult(null)\r\n                setaddMemberDisplay(\"none\")}}>Cancel\r\n            </p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default GroupProfile\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectToggleConversation, selectToggleProfile } from '../redux/Slices'\r\nimport ChatSection from './ChatSection/ChatSection'\r\nimport ContactProfile from './Profile/ContactProfile/ContactProfile'\r\nimport UserProfile from './Profile/UserProfile/UserProfile'\r\nimport Sidebar from './Sidebar/Sidebar'\r\nimport \"../App/App.css\"\r\nimport GroupProfile from './Profile/GroupProfile/GroupProfile'\r\nimport { selectContacts, selectGroups, selectUser, setContacts, setGroups } from '../redux/Slices'\r\nimport { fetchContact, fetchGroup } from '../redux/actions/actions'\r\nimport { RotateCircleLoading } from \"react-loadingg\"\r\nimport * as io from \"../sockets/io\"\r\nimport events from \"../sockets/events\"\r\n\r\n\r\nfunction Chat() {\r\n    \r\n    const dispatch = useDispatch()\r\n    const user = useSelector(selectUser)\r\n    const toggleProfile = useSelector(selectToggleProfile)\r\n    const toggleConversation = useSelector(selectToggleConversation)\r\n    const groups = useSelector(selectGroups)\r\n    const contacts = useSelector(selectContacts)\r\n    const [group, setgroup] = useState(null)\r\n    const [contact, setcontact] = useState(null)\r\n    const [loadingCounter, setloadingCounter] = useState(user.groups.length + user.contacts.length)\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        io.connect(user._id, dispatch)\r\n        io.send(events.sendMessage, user.username + \" is connected to server\")\r\n        io.receive(events.receiveMessage, (data) =>console.log(data))\r\n        io.updateOnlineStatus(events.updateOnlineStatus, user, dispatch)\r\n        io.updateNewStatus(events.updateNewStatus, dispatch)\r\n        io.editName(events.editName, dispatch)\r\n        io.editSpecificGroupName(events.editGroupName, dispatch)\r\n        io.editSpecificGroupDes(events.editGroupDescription, dispatch)\r\n        io.newMessage(events.newMessage, dispatch)\r\n        io.blockStatus(events.updateBlock, dispatch)\r\n        io.addNewContact(events.addNewContact, user, dispatch)\r\n        io.addMember(events.addNewMember, dispatch)\r\n        io.onLeaveGroup(events.leaveGroup, dispatch)\r\n        io.connectToNewGroup(events.connectMemberToGroup, user, dispatch)\r\n        io.deleteMessages(events.deleteContactMessages, dispatch)\r\n        io.deleteMessages(events.deleteGroupMessages, dispatch)\r\n        io.deleteGroup(events.deleteGroup, dispatch)\r\n\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n\r\n        // fetch all contacts\r\n        if (user.contacts) {\r\n            user.contacts.forEach((contact_id) => {\r\n               dispatch(fetchContact(contact_id, user, setcontact))\r\n           })\r\n        }\r\n        // fetch all groups\r\n        if (user.groups) {\r\n            user.groups.forEach((group_id) => { \r\n                dispatch(fetchGroup(group_id, user, setgroup))\r\n            })\r\n        }\r\n\r\n\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n       if (contact) {\r\n            dispatch(setContacts([...contacts, contact]))\r\n            setloadingCounter(loadingCounter -1)\r\n        }\r\n\r\n    }, [contact, dispatch])\r\n\r\n\r\n    useEffect(() => {\r\n       if (group) {\r\n            dispatch(setGroups([...groups, group]))\r\n            setloadingCounter(loadingCounter -1)\r\n       }\r\n\r\n    }, [group, dispatch])\r\n\r\n\r\n    if (loadingCounter > 0) {\r\n        return <RotateCircleLoading color=\"#0E59ED\"  />\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"appChat\">\r\n            {!toggleProfile? <Sidebar />: <UserProfile />}\r\n\r\n            {!toggleConversation.toggle? <ChatSection />: \r\n            (toggleConversation.type === \"contact\"? <ContactProfile /> : <GroupProfile /> ) \r\n            }\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch } from \"react-redux\"\r\nimport {  logout, setError, setIsLoggedIn, } from \"../../redux/Slices/userSlice\" \r\nimport './Login.css'\r\nimport { auth, provider } from \"../../firebase\"\r\nimport { fetchCreateUser } from '../../redux/actions/actions'\r\nimport { RotateCircleLoading } from \"react-loadingg\"\r\nimport { useAuthState } from \"react-firebase-hooks/auth\"\r\n\r\nfunction Login() {\r\n\r\n    const dispatch = useDispatch()\r\n    const [ loading ] = useAuthState(auth)\r\n\r\n    const signIn = () => {\r\n        \r\n        dispatch(setIsLoggedIn(false))\r\n        auth.signInWithPopup(provider)\r\n        .catch( (error) => dispatch(setError({ loginError: error, isLoggedIn: false })))\r\n    }\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged( (authUser) =>  {\r\n            if (authUser){\r\n                const req = {\r\n                    id: authUser.uid, \r\n                    username: authUser.displayName,\r\n                    email: authUser.email,\r\n                    photoUrl: authUser.photoURL,\r\n                }\r\n                dispatch(fetchCreateUser(req))\r\n\r\n            }\r\n            else {\r\n                dispatch(logout())\r\n            }\r\n            \r\n        } )\r\n\r\n    }, [dispatch])\r\n\r\n    if (loading) {\r\n        return <RotateCircleLoading color=\"#0E59ED\"  />\r\n    }\r\n\r\n    return (\r\n        <div>       \r\n            <div className=\"login\">\r\n                <img src=\"https://i.postimg.cc/zXqXxPvQ/logoblue-clear.png\" alt=\"logo\"/>\r\n                {/* <h1>Welcome to webChatT</h1> */}\r\n                <div className=\"login-button\">\r\n                    {/* <p>Sign-In</p> */}\r\n                    <button onClick={signIn}>Sign-In with google</button>\r\n                </div>  \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react'\r\nimport \"./App.css\"\r\nimport Chat from './../components/Chat';\r\nimport Login from './../components/Login/Login';\r\nimport { selectUser } from '../redux/Slices';\r\nimport { useSelector } from 'react-redux';\r\nimport * as io from \"../sockets/io\"\r\n\r\n\r\nfunction App() {\r\n    const user = useSelector(selectUser)\r\n\r\n    \r\n    useEffect(() => {\r\n        return () =>  io.disconnect()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            { !user? <Login/> : <Chat />  }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n\r\n","import { configureStore } from \"@reduxjs/toolkit\"\r\nimport userReducer from \"../redux/Slices/userSlice\"\r\nimport optionReducer from \"../redux/Slices/optionSlice\"\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        user: userReducer,\r\n        option: optionReducer\r\n    },\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App/App';\r\nimport { Provider } from \"react-redux\"\r\nimport store from \"./store/store\"\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}